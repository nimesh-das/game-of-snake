Description: The point of the game is to not hit the 4 walls or yourself as the difficulty of the game advances. Use the up, left, right, down arrow keys to move the snake accordingly. Use Spacebar to pause, save and restart the game. Find a morcel of food on the game board and eat it. 

Enhancements: I added some background music for the intro, gameplay and snake dieng. The .wav files that were used can be obtained from gamethemesongs.com. I also added some texture background for certain elements of the game. I did not put a large emphasis on this as I had my sound effects already in place. However, I did add an intro background and a gameplay background. They were obtained from http://ask4asset.com/tower-defense-free-art-pack/, which is a free 2D game asset site. My hope is that between the backgrounds and music, I fulfill the enhancements requirement. I also tried to include a subtle level game design structure where the snake speeds up (gets to higher level) as you score more points.

Development Environment: I built the game in my Mac OSX Yosemite. I used Eclipse IDE for the development of my game and my JDK Version was 8.0_91.

Overall Design: I initially planned to get away by making a large class and store everything in it. This is why my Board2.class is the largest file. It is sort of my main file (but not the one that contains public static void main) and controls the actionPerformed and PaintComponent methods. I also initialize all my variables here. Basically I had an array of points, a timer, and x and y coordinates. With key presses, the corresponding x and y values increment, and since the graphics are being painted at some frame rate, a single object being repainted many times across different x and y values provides the notion of movement. For the snake, I had a list of points and depending on the speed of the snake, I added a new square to the end of the list and removed the tail every so often. Since the remaining body of the snake stays the same, with constant repainting this gave the snake like effect. So anyways, everything that I mentioned was more or less implemented in my Board2.class. As I continued onwards with my game, I separated out the newer files. So I have a big chunk of my game in Board2.class, and then I have separate files like Audio (to control sounds), SplashScreen (to control main menu), HowToPlay (to control how to play page) and MouseIn (to control mouse input) which I added later on. I did not go back to separate out more things in Board2.class, but ideally (and if I had more time), I would definitely go back and do this. My SwingTimerExample class contains the main method. It just initializes itself and the game board. Design patterns used would be observer. The actionPerformed() method in my Board2.class is the subject and it increments the x,y values depending on user input on keyboard. The paintComponent(Graphics g) method also in my Board2.class method is the main observer which listens in on the subject and updates the state of the graphics by iterating through the list of points and redrawing all of the existing ones (keep in mind at every iteration, the tail and head points get updated).

Note: I will most likely rename my SwingTimerExample class to Snake but if I haven't you know that SwingTimerExample.class contains my main method!! Also, when you start the game, don't just play right away. Sit back, turn the volume up, enjoy the music in main menu for a bit and have fun!!!!
